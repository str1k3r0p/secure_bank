<?php
/**
 * Banking DVWA Project
 * Vulnerability Base Class
 * 
 * This class serves as the base for all vulnerability implementations.
 */

namespace Vulnerabilities;

abstract class VulnerabilityBase
{
    /**
     * @var string The vulnerability name
     */
    protected $name;
    
    /**
     * @var string The vulnerability description
     */
    protected $description;
    
    /**
     * @var string The security level
     */
    protected $securityLevel;
    
    /**
     * @var array Source code for each security level
     */
    protected $sourceCode = [
        'low' => '',
        'medium' => '',
        'high' => ''
    ];
    
    /**
     * Constructor
     * 
     * @param string $securityLevel The security level
     */
    public function __construct($securityLevel = null)
    {
        // Set security level
        $this->securityLevel = $securityLevel ?: \App\Core\Security::getSecurityLevel($this->getType());
        
        // Load source code
        $this->loadSourceCode();
    }
    
    /**
     * Get the vulnerability type
     * 
     * @return string The vulnerability type
     */
    abstract public function getType();
    
    /**
     * Execute the vulnerability
     * 
     * @param array $input The input data
     * @return mixed The result
     */
    abstract public function execute($input);
    
    /**
     * Get the vulnerability name
     * 
     * @return string The vulnerability name
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Get the vulnerability description
     * 
     * @return string The vulnerability description
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Get the security level
     * 
     * @return string The security level
     */
    public function getSecurityLevel()
    {
        return $this->securityLevel;
    }
    
    /**
     * Set the security level
     * 
     * @param string $level The security level
     */
    public function setSecurityLevel($level)
    {
        $this->securityLevel = $level;
    }
    
    /**
     * Get the source code for the current security level
     * 
     * @return string The source code
     */
    public function getSourceCode()
    {
        return $this->sourceCode[$this->securityLevel] ?? '';
    }
    
    /**
     * Get the source code for all security levels
     * 
     * @return array The source code for all security levels
     */
    public function getAllSourceCode()
    {
        return $this->sourceCode;
    }
    
    /**
     * Load source code for all security levels
     */
    protected function loadSourceCode()
    {
        $class_name = get_class($this);
        $reflection = new \ReflectionClass($class_name);
        $file_path = $reflection->getFileName();
        
        // Get the directory containing the current class
        $dir = dirname($file_path);
        
        // Load source code for low security
        $low_file = $dir . '/LowSecurity.php';
        if (file_exists($low_file)) {
            $this->sourceCode['low'] = file_get_contents($low_file);
        }
        
        // Load source code for medium security
        $medium_file = $dir . '/MediumSecurity.php';
        if (file_exists($medium_file)) {
            $this->sourceCode['medium'] = file_get_contents($medium_file);
        }
        
        // Load source code for high security
        $high_file = $dir . '/HighSecurity.php';
        if (file_exists($high_file)) {
            $this->sourceCode['high'] = file_get_contents($high_file);
        }
    }
    
    /**
     * Create an instance of the appropriate security level class
     * 
     * @param string $vulnerability The vulnerability type
     * @param string $securityLevel The security level
     * @return VulnerabilityBase The vulnerability instance
     */
    public static function factory($vulnerability, $securityLevel = null)
    {
        // Get security level if not provided
        if ($securityLevel === null) {
            $securityLevel = \App\Core\Security::getSecurityLevel($vulnerability);
        }
        
        // Normalize vulnerability type
        $vulnerability = str_replace('-', '_', $vulnerability);
        
        // Build class name
        $namespace = 'Vulnerabilities\\' . ucfirst($vulnerability) . '\\';
        $class = $namespace . ucfirst($securityLevel) . 'Security';
        
        // Check if class exists
        if (!class_exists($class)) {
            throw new \InvalidArgumentException("Vulnerability class not found: {$class}");
        }
        
        // Create instance
        return new $class($securityLevel);
    }
}