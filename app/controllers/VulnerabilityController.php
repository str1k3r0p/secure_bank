<?php
/**
 * Banking DVWA Project
 * Vulnerability Controller
 * 
 * This controller handles vulnerability demonstrations.
 */

namespace App\Controllers;

use App\Core\Controller;
use App\Core\Logger;
use App\Core\Security;
use Vulnerabilities\VulnerabilityBase;

class VulnerabilityController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
        parent::__construct();
        
        // Require authentication
        $this->requireAuth();
    }
    
    /**
     * Vulnerability index page
     */
    public function index()
    {
        // Get all security levels
        $security_levels = Security::getAllSecurityLevels();
        
        // Render vulnerability index page
        $this->render('vulnerabilities/index', [
            'title' => 'Vulnerability Demonstrations',
            'security_levels' => $security_levels
        ]);
    }
    
    /**
     * Set security level
     */
    public function setSecurityLevel()
    {
        // Check if POST request
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            $this->redirect('/vulnerabilities');
        }
        
        // Get vulnerability and level from POST
        $vulnerability = $this->input('vulnerability');
        $level = $this->input('level');
        
        // Set security level
        Security::setSecurityLevel($vulnerability, $level);
        
        // Log security level change
        Logger::security("Security level changed", [
            'user_id' => $_SESSION['user_id'],
            'vulnerability' => $vulnerability,
            'level' => $level,
            'ip' => get_client_ip()
        ]);
        
        // Redirect back to vulnerabilities page
        $this->setFlash('success', "Security level for {$vulnerability} set to {$level}");
        $this->redirect('/vulnerabilities');
    }
    
    /**
     * Brute Force vulnerability
     */
    public function bruteForce()
    {
        // Get security level
        $security_level = Security::getSecurityLevel('brute_force');
        
        // Get vulnerability instance
        $vulnerability = VulnerabilityBase::factory('brute_force', $security_level);
        
        // Handle form submission
        $result = null;
        $input = null;
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // Get input
            $input = [
                'username' => $this->input('username'),
                'password' => $this->input('password')
            ];
            
            // Execute vulnerability
            $result = $vulnerability->execute($input);
            
            // Log vulnerability attempt
            Logger::security("Brute Force vulnerability attempted", [
                'user_id' => $_SESSION['user_id'],
                'security_level' => $security_level,
                'input' => $input,
                'result' => $result ? 'Success' : 'Failure',
                'ip' => get_client_ip()
            ]);
        }
        
        // Render brute force page
        $this->render('vulnerabilities/bruteforce', [
            'title' => 'Brute Force Vulnerability',
            'vulnerability' => $vulnerability,
            'security_level' => $security_level,
            'result' => $result,
            'input' => $input
        ]);
    }
    
    /**
     * Command Injection vulnerability
     */
    public function cmdInjection()
    {
        // Get security level
        $security_level = Security::getSecurityLevel('cmd_injection');
        
        // Get vulnerability instance
        $vulnerability = VulnerabilityBase::factory('cmd_injection', $security_level);
        
        // Handle form submission
        $result = null;
        $input = null;
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // Get input
            $input = [
                'command' => $this->input('command')
            ];
            
            // Execute vulnerability
            $result = $vulnerability->execute($input);
            
            // Log vulnerability attempt
            Logger::security("Command Injection vulnerability attempted", [
                'user_id' => $_SESSION['user_id'],
                'security_level' => $security_level,
                'input' => $input,
                'ip' => get_client_ip()
            ]);
        }
        
        // Render command injection page
        $this->render('vulnerabilities/cmd_injection', [
            'title' => 'Command Injection Vulnerability',
            'vulnerability' => $vulnerability,
            'security_level' => $security_level,
            'result' => $result,
            'input' => $input
        ]);
    }
    
    /**
     * SQL Injection vulnerability
     */
    public function sqlInjection()
    {
        // Get security level
        $security_level = Security::getSecurityLevel('sql_injection');
        
        // Get vulnerability instance
        $vulnerability = VulnerabilityBase::factory('sql_injection', $security_level);
        
        // Handle form submission
        $result = null;
        $input = null;
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // Get input
            $input = [
                'username' => $this->input('username')
            ];
            
            // Execute vulnerability
            $result = $vulnerability->execute($input);
            
            // Log vulnerability attempt
            Logger::security("SQL Injection vulnerability attempted", [
                'user_id' => $_SESSION['user_id'],
                'security_level' => $security_level,
                'input' => $input,
                'ip' => get_client_ip()
            ]);
        }
        
        // Render SQL injection page
        $this->render('vulnerabilities/sql_injection', [
            'title' => 'SQL Injection Vulnerability',
            'vulnerability' => $vulnerability,
            'security_level' => $security_level,
            'result' => $result,
            'input' => $input
        ]);
    }
    
    /**
     * Directory Traversal vulnerability
     */
    public function directoryTraversal()
    {
        // Get security level
        $security_level = Security::getSecurityLevel('directory_traversal');
        
        // Get vulnerability instance
        $vulnerability = VulnerabilityBase::factory('directory_traversal', $security_level);
        
        // Handle form submission
        $result = null;
        $input = null;
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // Get input
            $input = [
                'file' => $this->input('file')
            ];
            
            // Execute vulnerability
            $result = $vulnerability->execute($input);
            
            // Log vulnerability attempt
            Logger::security("Directory Traversal vulnerability attempted", [
                'user_id' => $_SESSION['user_id'],
                'security_level' => $security_level,
                'input' => $input,
                'ip' => get_client_ip()
            ]);
        }
        
        // Render directory traversal page
        $this->render('vulnerabilities/directory_traversal', [
            'title' => 'Directory Traversal Vulnerability',
            'vulnerability' => $vulnerability,
            'security_level' => $security_level,
            'result' => $result,
            'input' => $input
        ]);
    }
    
    /**
     * XSS vulnerability
     */
    public function xss()
    {
        // Get security level
        $security_level = Security::getSecurityLevel('xss');
        
        // Get vulnerability instance
        $vulnerability = VulnerabilityBase::factory('xss', $security_level);
        
        // Handle form submission
        $result = null;
        $input = null;
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // Get input
            $input = [
                'message' => $this->input('message')
            ];
            
            // Execute vulnerability
            $result = $vulnerability->execute($input);
            
            // Log vulnerability attempt
            Logger::security("XSS vulnerability attempted", [
                'user_id' => $_SESSION['user_id'],
                'security_level' => $security_level,
                'input' => $input,
                'ip' => get_client_ip()
            ]);
        }
        
        // Render XSS page
        $this->render('vulnerabilities/xss', [
            'title' => 'Cross-Site Scripting (XSS) Vulnerability',
            'vulnerability' => $vulnerability,
            'security_level' => $security_level,
            'result' => $result,
            'input' => $input
        ]);
    }
    
    /**
     * View source code
     */
    public function source()
    {
        // Get vulnerability and level from GET
        $vulnerability = $this->input('vulnerability');
        $level = $this->input('level');
        
        if (!$vulnerability || !$level) {
            $this->redirect('/vulnerabilities');
        }
        
        // Get vulnerability instance
        try {
            $vulnerability_instance = VulnerabilityBase::factory($vulnerability, $level);
            $source_code = $vulnerability_instance->getSourceCode();
        } catch (\Exception $e) {
            $this->setFlash('error', 'Source code not found');
            $this->redirect('/vulnerabilities');
        }
        
        // Render source view page
        $this->render('vulnerabilities/source_view', [
            'title' => 'Source Code: ' . ucfirst($vulnerability) . ' (' . ucfirst($level) . ')',
            'vulnerability' => $vulnerability,
            'level' => $level,
            'source_code' => $source_code
        ]);
    }
}